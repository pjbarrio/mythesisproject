/*
 * Container.h
 *
 *  Created on: 05/05/2009
 *      Author: Pablo
 *
 * This class represent the model application camera model.
 * Every variable that could change the image interpretation
 * could be found here. It is designed in a singleton pattern
 *
 */

#ifndef CONTAINER_H_
#define CONTAINER_H_

#include "../CamViewer.h"
#include "../../mainwindow.h"
#include <QLabel>
#include <QMutex>
#include <QPixmap>
#include <QList>
#include "cv.h"
#include "../../Filters/FilterHandler.h"
#include "../../ConfigurationHandler/ConfigHandler.h"
#include "../../stabilizers/LightStabilizer.h"
#include "../../Logger/LogHandler.h"
#include "../../CommonProject/InterfaceWorker/Initializer.h"
#include "../../CommonProject/Threads/Thread_Worker.h"

class Container {
public:

	/*
	 * This method returns the current instance of CamViewer object.
	 */

	CamViewer* getCamViewer(){return cv;};
	void setCamViewer(CamViewer* cam){cv = cam;};
	void setThesisProject(ThesisProject* thesisProject){tp = thesisProject;};

	/*
	 * This method returns the main application model intance.
	 */

	ThesisProject* getThesisProject(){return tp;};
	void createCamViewerInstance(QLabel*);
	static Container* getInstance();

	/*
	 * This method returns the skin filtered image.
	 */

	QPixmap* getFilteredImage(){return fi;};
	void setFilteredImage(IplImage* filteredImage);
    FilterHandler *getFilterHandler();
    ConfigHandler *getConfigHandler();
    LightStabilizer *getLightStabilizer();
    LogHandler *getLog();

    /*
     * This method returns if the hand is closed.
     */

    bool isClosed(){return isclosed;};

    /*
     * This method sets true or false the closed hand state.
     */

    void setClosed(bool value){isclosed=value;};

    void finishCamViewer();

	void setModel(bool,bool,bool,bool,bool,bool,bool,bool);

	/*
	 * This method sets true or false if the user want or not
	 * rotate the image horizontally.
	 */

	void setRotateX(bool val){rotateX = val;};

	/*
	 * This method sets true or false if the user want or not
	 * rotate the image vertically.
	 */

	void setRotateY(bool val){rotateY = val;};

	/*
	 * This method returns if the user has selected horizontal
	 * rotation.
	 */

	bool getRotateX(){return rotateX;};

	/*
	 * This method returns if the user has selected vertical
	 * rotation.
	 */

	bool getRotateY(){return rotateY;};

	/*
	 * This method returns if the user has selected to
	 * support gestures.
	 */

	bool getGestureSupport(){return gestureSupport;};

	/*
	 * This method returns if the user has selected the
	 * GUI which will show the tracking state.
	 */

	bool getStateSupport(){return stateSupport;};

	/*
	 * This method returns if the user has selected show the
	 * mouse pointer following the hand movements.
	 */

	bool getViewPointer(){return viewPointer;};

	/*
	 * This method returns if the user has selected clicking
	 * support (Open or Close hand)
	 */

	bool getClickSupport(){return clickSupport;};

	/*
	 * This method returns if the click is generated by
	 * a close hand state.
	 */

	bool getCloseClick(){return closeClick;};

	/*
	 * This method returns if the click is generated by
	 * a open hand state.
	 */

	bool getOpenClick(){return openClick;};

	/*
	 * This method sets the frame captured by the camViewer
	 * object. It is used to execute light stabilizer diagnostic.
	 */

	void setSavedImage(IplImage* im){saved = im;};

	/*
	 * This method returns the frame saved.
	 */

	IplImage* getSavedImage(){return saved;};

	/*
	 * This method sets the bool value which represent that the
	 * hand Diagnostic has been executed.
	 */

	void setDiagnosticExecuted(bool val){handDiagnosticExecuted = val;};

	/*
	 * This method returns if the user has run the Hand Diagnostic.
	 */

	bool getDiagnosticExecuted(){return handDiagnosticExecuted;};

	void createVideo();
	void addFrame(IplImage*);
	QList<IplImage*>* getVideo();
	void deleteVideo();


private:
	QList<IplImage*>* video;
	QList<Initializer*>* initializerList;
	QList<Thread_Worker*>* threadworkerList;
	QMutex filteredImageAccess;
	QMutex logAccess;
	QMutex configHandlerAccess;
	QMutex lightStabilizerAccess;
	QMutex filterHandlerAccess;
	IplImage* saved;
	bool rotateX;
	bool rotateY;
	bool gestureSupport;
	bool stateSupport;
	bool viewPointer;
	bool clickSupport;
	bool closeClick;
	bool openClick;
	bool handDiagnosticExecuted;
	FilterHandler* filterHandler;
	ConfigHandler* configHandler;
	LightStabilizer *ls;
	LogHandler* log;
	Container();
	virtual ~Container();
	static Container* instance;
	CamViewer* cv;
	ThesisProject* tp;
	QPixmap* fi;
	QImage* image;
	bool isclosed;
};

#endif /* CONTAINER_H_ */
